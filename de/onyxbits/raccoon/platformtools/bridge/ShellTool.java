package de.onyxbits.raccoon.platformtools.bridge;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

public abstract class ShellTool {
   protected BridgeClient client;

   public ShellTool(BridgeClient client) {
      this.client = client;
   }

   protected abstract InputStream openCode() throws IOException;

   protected abstract String getMainClass();

   protected abstract String getBaseName();

   public void install() throws IOException {
      this.client.exec("mkdir -p " + this.pathOfTool());
      StringBuilder sb = new StringBuilder();
      sb.append("# Generated by Raccoon (https://raccoon.onyxbits.de) do not edit\n");
      sb.append("base=");
      sb.append(this.pathOfTool());
      sb.append("\n");
      sb.append("export CLASSPATH=$base/");
      sb.append(this.getBaseName());
      sb.append(".jar\n");
      sb.append("export ANDROID_DATA=$base\n");
      sb.append("mkdir -p $base/dalvik-cache\n");
      sb.append("exec app_process $base ");
      sb.append(this.getMainClass());
      sb.append(" \"$@\"\n");
      byte[] buf = sb.toString().getBytes();
      FileMode m = (new FileMode()).r().w().x().group().r().x().others().r().x();
      OutputStream push = this.client.openPushStream(this.pathOfScript(), m.get());
      Throwable var5 = null;

      try {
         push.write(buf);
         push.close();
      } catch (Throwable var49) {
         var5 = var49;
         throw var49;
      } finally {
         if (push != null) {
            if (var5 != null) {
               try {
                  push.close();
               } catch (Throwable var46) {
                  var5.addSuppressed(var46);
               }
            } else {
               push.close();
            }
         }

      }

      m = (new FileMode()).r().w().group().r().others().r();
      push = this.client.openPushStream(this.pathOfCode(), m.get());
      var5 = null;

      try {
         InputStream in = this.openCode();
         Throwable var7 = null;

         try {
            boolean var8 = true;

            int len;
            while((len = in.read(buf)) != -1) {
               push.write(buf, 0, len);
            }
         } catch (Throwable var51) {
            var7 = var51;
            throw var51;
         } finally {
            if (in != null) {
               if (var7 != null) {
                  try {
                     in.close();
                  } catch (Throwable var48) {
                     var7.addSuppressed(var48);
                  }
               } else {
                  in.close();
               }
            }

         }
      } catch (Throwable var53) {
         var5 = var53;
         throw var53;
      } finally {
         if (push != null) {
            if (var5 != null) {
               try {
                  push.close();
               } catch (Throwable var47) {
                  var5.addSuppressed(var47);
               }
            } else {
               push.close();
            }
         }

      }

   }

   public void uninstall() throws IOException {
      this.client.exec("rm -r " + this.pathOfTool());
   }

   public String createCommand(String... args) {
      StringBuilder sb = new StringBuilder(this.pathOfScript());
      if (args != null) {
         String[] var3 = args;
         int var4 = args.length;

         for(int var5 = 0; var5 < var4; ++var5) {
            String arg = var3[var5];
            sb.append(' ');
            sb.append(arg);
         }
      }

      return sb.toString();
   }

   private String pathOfTool() {
      return this.client.pathOfStagingArea() + "/" + this.getBaseName();
   }

   private String pathOfScript() {
      return this.pathOfTool() + "/" + this.getBaseName() + ".sh";
   }

   private String pathOfCode() {
      return this.pathOfTool() + "/" + this.getBaseName() + ".jar";
   }
}
